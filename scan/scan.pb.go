// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scan.proto

/*
Package scan is a generated protocol buffer package.

It is generated from these files:
	scan.proto

It has these top-level messages:
	StartRequest
	StartResponse
	StatusRequest
	StatusResponse
*/
package scan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusResponse_State int32

const (
	StatusResponse_STARTED     StatusResponse_State = 0
	StatusResponse_COMPLETED   StatusResponse_State = 1
	StatusResponse_CANCELLED   StatusResponse_State = 2
	StatusResponse_SCAN_FALURE StatusResponse_State = 3
	StatusResponse_TIMED_OUT   StatusResponse_State = 4
)

var StatusResponse_State_name = map[int32]string{
	0: "STARTED",
	1: "COMPLETED",
	2: "CANCELLED",
	3: "SCAN_FALURE",
	4: "TIMED_OUT",
}
var StatusResponse_State_value = map[string]int32{
	"STARTED":     0,
	"COMPLETED":   1,
	"CANCELLED":   2,
	"SCAN_FALURE": 3,
	"TIMED_OUT":   4,
}

func (x StatusResponse_State) String() string {
	return proto.EnumName(StatusResponse_State_name, int32(x))
}
func (StatusResponse_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type StartRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StartRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type StartResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StartResponse) Reset()                    { *m = StartResponse{} }
func (m *StartResponse) String() string            { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()               {}
func (*StartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StartResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StatusRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StatusResponse struct {
	Id           string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	StartRequest *StartRequest            `protobuf:"bytes,2,opt,name=startRequest" json:"startRequest,omitempty"`
	State        StatusResponse_State     `protobuf:"varint,3,opt,name=state,enum=scan.StatusResponse_State" json:"state,omitempty"`
	Results      []*StatusResponse_Result `protobuf:"bytes,4,rep,name=results" json:"results,omitempty"`
	Message      string                   `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
	Started      int64                    `protobuf:"varint,6,opt,name=started" json:"started,omitempty"`
	Completed    int64                    `protobuf:"varint,7,opt,name=completed" json:"completed,omitempty"`
	Duration     int64                    `protobuf:"varint,8,opt,name=duration" json:"duration,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatusResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StatusResponse) GetStartRequest() *StartRequest {
	if m != nil {
		return m.StartRequest
	}
	return nil
}

func (m *StatusResponse) GetState() StatusResponse_State {
	if m != nil {
		return m.State
	}
	return StatusResponse_STARTED
}

func (m *StatusResponse) GetResults() []*StatusResponse_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *StatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StatusResponse) GetStarted() int64 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *StatusResponse) GetCompleted() int64 {
	if m != nil {
		return m.Completed
	}
	return 0
}

func (m *StatusResponse) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type StatusResponse_Result struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *StatusResponse_Result) Reset()                    { *m = StatusResponse_Result{} }
func (m *StatusResponse_Result) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse_Result) ProtoMessage()               {}
func (*StatusResponse_Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *StatusResponse_Result) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StatusResponse_Result) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*StartRequest)(nil), "scan.StartRequest")
	proto.RegisterType((*StartResponse)(nil), "scan.StartResponse")
	proto.RegisterType((*StatusRequest)(nil), "scan.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "scan.StatusResponse")
	proto.RegisterType((*StatusResponse_Result)(nil), "scan.StatusResponse.Result")
	proto.RegisterEnum("scan.StatusResponse_State", StatusResponse_State_name, StatusResponse_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scan service

type ScanClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Cancel(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type scanClient struct {
	cc *grpc.ClientConn
}

func NewScanClient(cc *grpc.ClientConn) ScanClient {
	return &scanClient{cc}
}

func (c *scanClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := grpc.Invoke(ctx, "/scan.Scan/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/scan.Scan/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanClient) Cancel(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/scan.Scan/Cancel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scan service

type ScanServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Cancel(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterScanServer(s *grpc.Server, srv ScanServer) {
	s.RegisterService(&_Scan_serviceDesc, srv)
}

func _Scan_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scan.Scan/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scan_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scan.Scan/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scan_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scan.Scan/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanServer).Cancel(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scan.Scan",
	HandlerType: (*ScanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Scan_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Scan_Status_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Scan_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scan.proto",
}

func init() { proto.RegisterFile("scan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x1f, 0x49, 0x9a, 0x49, 0x1a, 0xac, 0x29, 0x07, 0xcb, 0x54, 0x22, 0xf2, 0x29, 0xea,
	0xa1, 0x41, 0x41, 0xf4, 0xc0, 0x2d, 0x4d, 0x0c, 0x42, 0x4a, 0x5b, 0xb4, 0x49, 0xcf, 0xd5, 0x12,
	0xaf, 0x22, 0x4b, 0x89, 0x37, 0x78, 0xd7, 0x27, 0xc4, 0x85, 0xbf, 0xc0, 0xcf, 0xe1, 0x67, 0x70,
	0xe5, 0xc8, 0x0f, 0x41, 0x3b, 0x6b, 0x97, 0x04, 0x59, 0x1c, 0xb8, 0xed, 0xdb, 0xf7, 0xe6, 0xed,
	0xcc, 0x1b, 0x2d, 0x80, 0x5a, 0xf3, 0xfc, 0x72, 0x5f, 0x48, 0x2d, 0xd1, 0x37, 0xe7, 0xe8, 0x7c,
	0x23, 0xe5, 0x66, 0x2b, 0xc6, 0x7c, 0x9f, 0x8d, 0x79, 0x9e, 0x4b, 0xcd, 0x75, 0x26, 0x73, 0x65,
	0x35, 0xf1, 0x35, 0xf4, 0x97, 0x9a, 0x17, 0x9a, 0x89, 0x4f, 0xa5, 0x50, 0x1a, 0x43, 0xe8, 0xf0,
	0x34, 0x2d, 0x84, 0x52, 0xa1, 0x33, 0x74, 0x46, 0x5d, 0x56, 0x43, 0xc3, 0xe8, 0x6c, 0x27, 0x64,
	0xa9, 0x43, 0x77, 0xe8, 0x8c, 0x3c, 0x56, 0xc3, 0xf8, 0x05, 0x9c, 0x56, 0x1e, 0x6a, 0x2f, 0x73,
	0x25, 0x70, 0x00, 0x6e, 0x96, 0x56, 0xf5, 0x6e, 0x96, 0x56, 0x02, 0x5d, 0xaa, 0xfa, 0x95, 0xbf,
	0x05, 0xdf, 0x3d, 0x18, 0xd4, 0x8a, 0x66, 0x0f, 0xbc, 0x82, 0xbe, 0x3a, 0x68, 0x94, 0x7a, 0xe8,
	0x4d, 0xf0, 0x92, 0xe6, 0x3d, 0x1c, 0x81, 0x1d, 0xe9, 0xf0, 0x25, 0xb4, 0x94, 0xe6, 0x5a, 0x84,
	0xde, 0xd0, 0x19, 0x0d, 0x26, 0xd1, 0x63, 0xc1, 0xc1, 0x63, 0x04, 0x05, 0xb3, 0x42, 0x7c, 0x0d,
	0x9d, 0x42, 0xa8, 0x72, 0xab, 0x55, 0xe8, 0x0f, 0xbd, 0x51, 0x6f, 0xf2, 0xbc, 0xb1, 0x86, 0x91,
	0x86, 0xd5, 0x5a, 0x93, 0xcf, 0x4e, 0x28, 0xc5, 0x37, 0x22, 0x6c, 0xd9, 0xe4, 0x2a, 0x68, 0x18,
	0x6a, 0x49, 0xa4, 0x61, 0xdb, 0x26, 0x57, 0x41, 0x3c, 0x87, 0xee, 0x5a, 0xee, 0xf6, 0x5b, 0x61,
	0xb8, 0x0e, 0x71, 0x7f, 0x2e, 0x30, 0x82, 0x93, 0xb4, 0x2c, 0x68, 0x5d, 0xe1, 0x09, 0x91, 0x8f,
	0x38, 0xba, 0x82, 0xb6, 0x6d, 0xe0, 0x1f, 0x1b, 0x43, 0xf0, 0x73, 0xbe, 0x13, 0x14, 0x55, 0x97,
	0xd1, 0x39, 0x66, 0xd0, 0xa2, 0x61, 0xb1, 0x07, 0x9d, 0xe5, 0x6a, 0xca, 0x56, 0xc9, 0x3c, 0x78,
	0x82, 0xa7, 0xd0, 0x9d, 0xdd, 0xdd, 0x7c, 0x58, 0x24, 0x06, 0x3a, 0x04, 0xa7, 0xb7, 0xb3, 0x64,
	0xb1, 0x48, 0xe6, 0x81, 0x8b, 0x4f, 0xa1, 0xb7, 0x9c, 0x4d, 0x6f, 0x1f, 0xde, 0x4e, 0x17, 0xf7,
	0x2c, 0x09, 0x3c, 0xc3, 0xaf, 0xde, 0xdf, 0x24, 0xf3, 0x87, 0xbb, 0xfb, 0x55, 0xe0, 0x4f, 0x7e,
	0x3a, 0xe0, 0x2f, 0xd7, 0x3c, 0xc7, 0x6b, 0x32, 0x2f, 0x34, 0x36, 0xac, 0x25, 0x3a, 0x3b, 0xba,
	0xb3, 0x21, 0xc6, 0xc1, 0xd7, 0x1f, 0xbf, 0xbe, 0xb9, 0x10, 0xb7, 0xc6, 0x86, 0x7c, 0xe3, 0x5c,
	0xe0, 0x3b, 0x68, 0xdb, 0xa0, 0xf1, 0xec, 0x38, 0x76, 0xeb, 0xf2, 0xac, 0x69, 0x17, 0x31, 0x92,
	0x4d, 0x1f, 0x81, 0x6c, 0xc6, 0x9f, 0xb3, 0xf4, 0x8b, 0x31, 0x9a, 0xf1, 0x7c, 0x2d, 0xb6, 0xff,
	0x61, 0x74, 0x71, 0x60, 0xf4, 0xb1, 0x4d, 0x3f, 0xe5, 0xd5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x43, 0xf9, 0xde, 0x14, 0x5b, 0x03, 0x00, 0x00,
}
