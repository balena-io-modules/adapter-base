// Code generated by protoc-gen-go. DO NOT EDIT.
// source: adapter.proto

/*
Package adapter is a generated protocol buffer package.

It is generated from these files:
	adapter.proto

It has these top-level messages:
	ScanOptions
	UpdateOptions
	Id
	Destination
	Progress
	Job
	Jobs
*/
package adapter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State__         State = 0
	State_STARTED   State = 1
	State_COMPLETED State = 2
	State_CANCELLED State = 3
	State_FAILED    State = 4
	State_TIMED_OUT State = 5
)

var State_name = map[int32]string{
	0: "_",
	1: "STARTED",
	2: "COMPLETED",
	3: "CANCELLED",
	4: "FAILED",
	5: "TIMED_OUT",
}
var State_value = map[string]int32{
	"_":         0,
	"STARTED":   1,
	"COMPLETED": 2,
	"CANCELLED": 3,
	"FAILED":    4,
	"TIMED_OUT": 5,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ScanOptions struct {
	Number int64                              `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Delay  int64                              `protobuf:"varint,2,opt,name=delay" json:"delay,omitempty"`
	Extra  map[string]*google_protobuf1.Value `protobuf:"bytes,3,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ScanOptions) Reset()                    { *m = ScanOptions{} }
func (m *ScanOptions) String() string            { return proto.CompactTextString(m) }
func (*ScanOptions) ProtoMessage()               {}
func (*ScanOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ScanOptions) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *ScanOptions) GetDelay() int64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *ScanOptions) GetExtra() map[string]*google_protobuf1.Value {
	if m != nil {
		return m.Extra
	}
	return nil
}

type UpdateOptions struct {
	Image        string                             `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Destinations []*Destination                     `protobuf:"bytes,2,rep,name=destinations" json:"destinations,omitempty"`
	Extra        map[string]*google_protobuf1.Value `protobuf:"bytes,3,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpdateOptions) Reset()                    { *m = UpdateOptions{} }
func (m *UpdateOptions) String() string            { return proto.CompactTextString(m) }
func (*UpdateOptions) ProtoMessage()               {}
func (*UpdateOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateOptions) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *UpdateOptions) GetDestinations() []*Destination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *UpdateOptions) GetExtra() map[string]*google_protobuf1.Value {
	if m != nil {
		return m.Extra
	}
	return nil
}

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Destination struct {
	Id    string                             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Extra map[string]*google_protobuf1.Value `protobuf:"bytes,2,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Destination) Reset()                    { *m = Destination{} }
func (m *Destination) String() string            { return proto.CompactTextString(m) }
func (*Destination) ProtoMessage()               {}
func (*Destination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Destination) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Destination) GetExtra() map[string]*google_protobuf1.Value {
	if m != nil {
		return m.Extra
	}
	return nil
}

type Progress struct {
	Started   int64 `protobuf:"varint,1,opt,name=started" json:"started,omitempty"`
	Completed int64 `protobuf:"varint,2,opt,name=completed" json:"completed,omitempty"`
	Duration  int64 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
}

func (m *Progress) Reset()                    { *m = Progress{} }
func (m *Progress) String() string            { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()               {}
func (*Progress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Progress) GetStarted() int64 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *Progress) GetCompleted() int64 {
	if m != nil {
		return m.Completed
	}
	return 0
}

func (m *Progress) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type Job struct {
	Id           string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State        State          `protobuf:"varint,2,opt,name=state,enum=adapter.State" json:"state,omitempty"`
	Destinations []*Destination `protobuf:"bytes,3,rep,name=destinations" json:"destinations,omitempty"`
	Progress     *Progress      `protobuf:"bytes,4,opt,name=progress" json:"progress,omitempty"`
	Message      string         `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetState() State {
	if m != nil {
		return m.State
	}
	return State__
}

func (m *Job) GetDestinations() []*Destination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *Job) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *Job) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Jobs struct {
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *Jobs) Reset()                    { *m = Jobs{} }
func (m *Jobs) String() string            { return proto.CompactTextString(m) }
func (*Jobs) ProtoMessage()               {}
func (*Jobs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Jobs) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func init() {
	proto.RegisterType((*ScanOptions)(nil), "adapter.ScanOptions")
	proto.RegisterType((*UpdateOptions)(nil), "adapter.UpdateOptions")
	proto.RegisterType((*Id)(nil), "adapter.Id")
	proto.RegisterType((*Destination)(nil), "adapter.Destination")
	proto.RegisterType((*Progress)(nil), "adapter.Progress")
	proto.RegisterType((*Job)(nil), "adapter.Job")
	proto.RegisterType((*Jobs)(nil), "adapter.Jobs")
	proto.RegisterEnum("adapter.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scan service

type ScanClient interface {
	StartScan(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (*Id, error)
	Status(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Jobs, error)
	Cancel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error)
}

type scanClient struct {
	cc *grpc.ClientConn
}

func NewScanClient(cc *grpc.ClientConn) ScanClient {
	return &scanClient{cc}
}

func (c *scanClient) StartScan(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/adapter.Scan/StartScan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanClient) Status(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Jobs, error) {
	out := new(Jobs)
	err := grpc.Invoke(ctx, "/adapter.Scan/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scanClient) Cancel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/adapter.Scan/Cancel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scan service

type ScanServer interface {
	StartScan(context.Context, *ScanOptions) (*Id, error)
	Status(context.Context, *Id) (*Jobs, error)
	Cancel(context.Context, *Id) (*Job, error)
}

func RegisterScanServer(s *grpc.Server, srv ScanServer) {
	s.RegisterService(&_Scan_serviceDesc, srv)
}

func _Scan_StartScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanServer).StartScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter.Scan/StartScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanServer).StartScan(ctx, req.(*ScanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scan_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter.Scan/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanServer).Status(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scan_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScanServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter.Scan/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScanServer).Cancel(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adapter.Scan",
	HandlerType: (*ScanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartScan",
			Handler:    _Scan_StartScan_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Scan_Status_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Scan_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adapter.proto",
}

// Client API for Update service

type UpdateClient interface {
	StartUpdate(ctx context.Context, in *UpdateOptions, opts ...grpc.CallOption) (*Id, error)
	Status(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Jobs, error)
	Cancel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error)
}

type updateClient struct {
	cc *grpc.ClientConn
}

func NewUpdateClient(cc *grpc.ClientConn) UpdateClient {
	return &updateClient{cc}
}

func (c *updateClient) StartUpdate(ctx context.Context, in *UpdateOptions, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := grpc.Invoke(ctx, "/adapter.Update/StartUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateClient) Status(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Jobs, error) {
	out := new(Jobs)
	err := grpc.Invoke(ctx, "/adapter.Update/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateClient) Cancel(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/adapter.Update/Cancel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Update service

type UpdateServer interface {
	StartUpdate(context.Context, *UpdateOptions) (*Id, error)
	Status(context.Context, *Id) (*Jobs, error)
	Cancel(context.Context, *Id) (*Job, error)
}

func RegisterUpdateServer(s *grpc.Server, srv UpdateServer) {
	s.RegisterService(&_Update_serviceDesc, srv)
}

func _Update_StartUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).StartUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter.Update/StartUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).StartUpdate(ctx, req.(*UpdateOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Update_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter.Update/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).Status(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Update_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adapter.Update/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServer).Cancel(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Update_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adapter.Update",
	HandlerType: (*UpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartUpdate",
			Handler:    _Update_StartUpdate_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Update_Status_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Update_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adapter.proto",
}

func init() { proto.RegisterFile("adapter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0x65, 0xec, 0x38, 0x69, 0xbe, 0x93, 0x28, 0x8c, 0xa2, 0xca, 0x8a, 0x2a, 0x51, 0x2c, 0x16,
	0x55, 0x04, 0x89, 0x14, 0x84, 0x5a, 0xba, 0xa2, 0x6a, 0x5c, 0x29, 0x55, 0x4b, 0x2b, 0x37, 0x65,
	0x49, 0x35, 0x8e, 0x87, 0xc8, 0x90, 0xd8, 0x96, 0x67, 0x8c, 0xa8, 0x10, 0x1b, 0xae, 0xc0, 0x1d,
	0xb8, 0x04, 0x12, 0x2b, 0x24, 0x0e, 0xc0, 0x15, 0x58, 0x71, 0x0a, 0x34, 0x33, 0xb6, 0x13, 0xb7,
	0x5d, 0x64, 0xd5, 0x9d, 0xdf, 0xbc, 0xff, 0xbe, 0xdf, 0x9b, 0xf9, 0x1f, 0x9a, 0xc4, 0x27, 0x31,
	0xa7, 0x49, 0x3f, 0x4e, 0x22, 0x1e, 0xe1, 0x5a, 0x06, 0xbb, 0x5b, 0xb3, 0x28, 0x9a, 0xcd, 0xe9,
	0x80, 0xc4, 0xc1, 0x80, 0x84, 0x61, 0xc4, 0x09, 0x0f, 0xa2, 0x90, 0xa9, 0xb2, 0x82, 0x95, 0xc8,
	0x4b, 0xdf, 0x0d, 0x18, 0x4f, 0xd2, 0x29, 0x57, 0xac, 0xfd, 0x0b, 0x81, 0x79, 0x31, 0x25, 0xe1,
	0x59, 0x2c, 0x35, 0x78, 0x13, 0xaa, 0x61, 0xba, 0xf0, 0x68, 0x62, 0xa1, 0x6d, 0xb4, 0xa3, 0xbb,
	0x19, 0xc2, 0x1d, 0x30, 0x7c, 0x3a, 0x27, 0xd7, 0x96, 0x26, 0x8f, 0x15, 0xc0, 0x2f, 0xc0, 0xa0,
	0x9f, 0x78, 0x42, 0x2c, 0x7d, 0x5b, 0xdf, 0x31, 0x87, 0x8f, 0xfa, 0xb9, 0xc3, 0x95, 0x96, 0x7d,
	0x47, 0x54, 0x38, 0x21, 0x4f, 0xae, 0x5d, 0x55, 0xdd, 0x3d, 0x07, 0x58, 0x1e, 0xe2, 0x36, 0xe8,
	0x1f, 0xe8, 0xb5, 0xfc, 0x5f, 0xdd, 0x15, 0x9f, 0xf8, 0x29, 0x18, 0x1f, 0xc9, 0x3c, 0xa5, 0xf2,
	0x67, 0xe6, 0x70, 0xb3, 0xaf, 0x22, 0xf4, 0xf3, 0x08, 0xfd, 0x37, 0x82, 0x75, 0x55, 0xd1, 0xbe,
	0xb6, 0x87, 0xec, 0x7f, 0x08, 0x9a, 0x97, 0xb1, 0x4f, 0x38, 0xcd, 0x83, 0x74, 0xc0, 0x08, 0x16,
	0x64, 0x46, 0xb3, 0xbe, 0x0a, 0xe0, 0x3d, 0x68, 0xf8, 0x94, 0xf1, 0x20, 0x54, 0x57, 0x64, 0x69,
	0xd2, 0x77, 0xa7, 0xf0, 0x3d, 0x5a, 0x92, 0x6e, 0xa9, 0x12, 0xef, 0x96, 0xa3, 0x3e, 0x2e, 0x24,
	0xa5, 0xdf, 0xde, 0x4b, 0xd8, 0x0e, 0x68, 0x63, 0x1f, 0xb7, 0x40, 0x0b, 0xfc, 0xac, 0x91, 0x16,
	0xf8, 0xf6, 0x77, 0x04, 0xe6, 0x8a, 0xfd, 0x9b, 0xfc, 0xf2, 0xad, 0xb4, 0x1b, 0x6f, 0xb5, 0x22,
	0xba, 0x17, 0xfb, 0x6f, 0x61, 0xe3, 0x3c, 0x89, 0x66, 0x09, 0x65, 0x0c, 0x5b, 0x50, 0x63, 0x9c,
	0x24, 0x9c, 0xfa, 0xd9, 0xbc, 0xe5, 0x10, 0x6f, 0x41, 0x7d, 0x1a, 0x2d, 0xe2, 0x39, 0x15, 0x9c,
	0x1a, 0xba, 0xe5, 0x01, 0xee, 0xc2, 0x86, 0x9f, 0x26, 0xd2, 0xb3, 0xa5, 0x4b, 0xb2, 0xc0, 0xf6,
	0x4f, 0x04, 0xfa, 0x71, 0xe4, 0xdd, 0xba, 0x80, 0x27, 0x60, 0x30, 0x4e, 0xb8, 0x72, 0xda, 0x1a,
	0xb6, 0x96, 0xc3, 0x2a, 0x4e, 0x5d, 0x45, 0xde, 0x9a, 0x10, 0x7d, 0xed, 0x09, 0x79, 0x06, 0x1b,
	0x71, 0x96, 0xcb, 0xaa, 0xc8, 0xcb, 0x78, 0x58, 0xa8, 0xf2, 0xc0, 0x6e, 0x51, 0x22, 0xa2, 0x2f,
	0x28, 0x63, 0x62, 0x44, 0x0d, 0xe9, 0x31, 0x87, 0xf6, 0x0e, 0x54, 0x8e, 0x23, 0x8f, 0xe1, 0x6d,
	0xa8, 0xbc, 0x8f, 0x3c, 0x66, 0x21, 0x69, 0xa1, 0x51, 0x34, 0x3b, 0x8e, 0x3c, 0x57, 0x32, 0xbd,
	0x09, 0x18, 0xd2, 0x3c, 0x36, 0x00, 0x5d, 0xb5, 0x1f, 0x60, 0x13, 0x6a, 0x17, 0x93, 0x03, 0x77,
	0xe2, 0x8c, 0xda, 0x08, 0x37, 0xa1, 0x7e, 0x78, 0x76, 0x7a, 0x7e, 0xe2, 0x08, 0xa8, 0x49, 0x78,
	0xf0, 0xfa, 0xd0, 0x39, 0x39, 0x71, 0x46, 0x6d, 0x1d, 0x03, 0x54, 0x8f, 0x0e, 0xc6, 0xe2, 0xbb,
	0x22, 0xa8, 0xc9, 0xf8, 0xd4, 0x19, 0x5d, 0x9d, 0x5d, 0x4e, 0xda, 0xc6, 0xf0, 0x07, 0x82, 0x8a,
	0x58, 0x60, 0xfc, 0x0a, 0xea, 0x17, 0xe2, 0x39, 0x24, 0xe8, 0xdc, 0xb5, 0xdc, 0x5d, 0xb3, 0x38,
	0x1d, 0xfb, 0x76, 0xfb, 0xeb, 0x9f, 0xbf, 0xdf, 0x34, 0xb0, 0x8d, 0x01, 0x9b, 0x92, 0x70, 0x1f,
	0xf5, 0xf0, 0x1e, 0x54, 0x85, 0xc1, 0x94, 0xe1, 0xd5, 0xc2, 0x6e, 0x73, 0x35, 0x0b, 0xb3, 0xb1,
	0xd4, 0x35, 0x30, 0x48, 0xdd, 0xe0, 0x73, 0xe0, 0x7f, 0xc1, 0xbb, 0x50, 0x3d, 0x24, 0xe1, 0x94,
	0xce, 0xcb, 0xca, 0xd2, 0x2d, 0xe4, 0xc2, 0xde, 0x8a, 0x70, 0xf8, 0x1b, 0x41, 0x55, 0xed, 0x24,
	0x3e, 0x02, 0x53, 0xfa, 0xcf, 0xe0, 0xe6, 0xdd, 0x3b, 0x5b, 0xce, 0x90, 0xb5, 0xb4, 0x6b, 0x83,
	0x54, 0x16, 0x89, 0x14, 0xfb, 0x6b, 0xa5, 0xe8, 0x48, 0x65, 0x0b, 0x37, 0x32, 0xa5, 0xca, 0xf1,
	0x72, 0x9d, 0x1c, 0x99, 0xb4, 0x57, 0x92, 0x7a, 0x55, 0xb9, 0x43, 0xcf, 0xff, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x54, 0xe5, 0xcc, 0x48, 0xf8, 0x05, 0x00, 0x00,
}
